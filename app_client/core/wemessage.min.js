!function(){function e(e,t,o){e.when("/",{templateUrl:"home/home.view.html",controller:"homeCtrl",controllerAs:"vm"}).when("/chat/:roomid",{templateUrl:"/chat/chat.view.html",controller:"chatCtrl",controllerAs:"vm"}).when("/contacts",{templateUrl:"/contacts/contacts.view.html",controller:"contactsCtrl",controllerAs:"vm"}).when("/account/:accountid/thread/:contactName/:contactid",{templateUrl:"/conversation/conversation.view.html",controller:"conversationCtrl",controllerAs:"vm"}).when("/account-info/:contactid",{templateUrl:"/contactDetail/contactDetail.view.html",controller:"contactDetailCtrl",controllerAs:"vm"}).when("/chat-home",{templateUrl:"/static/static.view.html",controller:"chatHomeCtrl",controllerAs:"vm"}).otherwise({redirectTo:"/"}),t.html5Mode({enabled:!0,requireBase:!1});var a=":8080";o.setConnectionUrl(window.location.hostname+a)}angular.module("weMessageApp",["ngRoute","ngSanitize","socket.io","ui.bootstrap"]),angular.module("weMessageApp").config(["$routeProvider","$locationProvider","$socketProvider",e])}(),function(){function e(e,t,o,a,n){var r=this;r.setRoomName=function(e){return e=e.split("-").join(" "),e.split("_").join(" ")},r.roomid=t.roomid,r.chatName=r.setRoomName(r.roomid)||"Instant Chat",r.alertMessage="",r.messageThread=r.messageThread||[],r.userId=r.userId||localStorage.getItem("userId")||"",r.chatRoomUsers=[],o.on("set-id",function(e){r.userId=e,localStorage.setItem("userId",e)}),o.on("nickname-set",function(e){r.nickname=e,localStorage.nickname=e}),o.on("chatroom-message",function(e){var t=e.username||r.nickname||"",o={content:e.message,selfClasses:"",showNickname:!0,username:t};r.userId==e.sender?(o.selfClasses="self-sent text-right",o.showNickname=!1):"the socket master"==e.sender&&(o.selfClasses="bold text-center",o.showNickname=!1),r.messageThread.push(o),$("html, body").animate({scrollTop:$("#message-input-anchor").offset().top},"slow")}),r.sendMessage=function(){return r.messageToSend&&(o.emit("chatroom-message",r.messageToSend),r.messageToSend=""),!1},e.uploadImage=function(t){n.readImage(t,r.emitImage,e)},r.emitImage=function(e){o.emit("chatroom-message",e.target.result)},r.chatNicknamePopup=function(){a.open({backdrop:"static",keyboard:!1,templateUrl:"/modals/chatNickname/chatNickname.view.html",controller:"chatNicknameCtrl as vm",resolve:{chatRoomData:function(){return{roomid:r.roomid}}}})},r.nickname||r.chatNicknamePopup(),r.getUsers=function(){o.emit("request-sockets-in-room")},o.on("deliver-sockets-in-room",function(e){r.chatRoomUsers=e}),r.emailInvitePopup=function(){var e=a.open({templateUrl:"/modals/emailInvite/emailInvite.view.html",controller:"emailInviteCtrl as vm",resolve:{senderInfo:function(){return{sender:r.nickname,chatUrl:window.location.href}}}});e.result.then(function(e){if(e){var t={content:e,selfClasses:"bold text-center",showNickname:!1,username:""};r.messageThread.push(t)}})},r.sendMessageACK=function(){o.emit("echo-ack",r.dataToSend,function(e){r.serverResponseACK=e}),r.dataToSend=""}}angular.module("weMessageApp").controller("chatCtrl",e),e.$inject=["$scope","$routeParams","$socket","$uibModal","fileReader"]}(),function(){function e(e,t,o,a){var n=this;n.detailUrl=a.apiUrl+"/account/"+t.contactid,o({method:"GET",url:n.detailUrl,headers:{Authorization:"Bearer "+localStorage.getItem("authToken")}}).then(function(e){n.contact=e.data},function(e){console.log(e)}),n.onClickBack=a.onClickBack}angular.module("weMessageApp").controller("contactDetailCtrl",e),e.$inject=["$scope","$routeParams","$http","constants"]}(),function(){function e(e,t,o,a){var n=this;n.accountid=localStorage.getItem("accountid"),n.accountName=localStorage.getItem("accountName"),n.alertMessage="",n.apiUrl=a.apiUrl,n.contactsUrl=n.apiUrl+"/account-contacts",n.hasContacts=!0,t({method:"GET",url:n.contactsUrl,headers:{Authorization:"Bearer "+localStorage.getItem("authToken")}}).then(function(e){n.contacts=e.data,n.contacts&&n.contacts.length>0?n.hasContacts=!0:n.hasContacts=!1;for(var t=0;t<n.contacts.length;t++){var o=n.contacts[t].id;n.contacts[t].conversationUrl="/account/"+n.accountid+"/thread/"+n.contacts[t].name+"/"+o;n.getLatestMessage(o,t)}},function(e){n.hasContacts=!1,console.log(e)}),n.getLatestMessage=function(e,o){var a=n.apiUrl+"/messages/sender/"+n.accountid+"/recipient/"+e+"/latest";t({method:"GET",url:a,headers:{Authorization:"Bearer "+localStorage.getItem("authToken")}}).then(function(e){e.data&&(n.contacts[o].latestMessage=e.data)},function(e){console.log(e)})},n.onClickBack=a.onClickBack,n.addContactPopup=function(){var e=o.open({templateUrl:"/modals/addContact/addContact.view.html",controller:"addContactCtrl as vm"});e.result.then(function(e){e.id&&(e.conversationUrl="/account/"+n.accountid+"/thread/"+e.name+"/"+e.id,n.hasContacts=!0,n.contacts.push(e))})}}angular.module("weMessageApp").controller("contactsCtrl",e),e.$inject=["$scope","$http","$uibModal","constants"]}(),function(){function e(e,t,o,a,n,r){var c=this;c.accountid=t.accountid,c.userId=c.userId||localStorage.getItem("userId")||"",c.contact={id:t.contactid,name:t.contactName,shortName:t.contactName.split(" ")[0],url:"/account-info/"+t.contactid},c.threadUrl=n.apiUrl+"/messages/sender/"+c.accountid+"/recipient/"+c.contact.id,c.newMessageUrl=n.apiUrl+"/messages/",c.accountName=localStorage.getItem("accountName"),c.alertMessage="",c.messageThread=[],a({method:"GET",url:c.threadUrl,headers:{Authorization:"Bearer "+localStorage.getItem("authToken")}}).then(function(e){if(c.messageThread=e.data,c.messageThread){for(var t=0;t<c.messageThread.length;t++)c.messageThread[t].sender_account==c.accountid?(c.messageThread[t].selfClasses="self-sent text-right",c.messageThread[t].showNickname=!1):(c.messageThread[t].showNickname=!0,c.messageThread[t].username=c.contact.shortName);c.scrollToEnd()}},function(e){console.log(e)});var s=[c.accountid,c.contact.id];s.sort(function(e,t){return e-t}),c.roomid="convo-"+s[0]+"-"+s[1],o.emit("join-room",{roomid:c.roomid,nickname:c.accountName,conversation:!0}),o.on("set-id",function(e){c.userId=e,localStorage.setItem("userId",e)}),o.on("chatroom-message",function(e){var t=e.username||c.nickname||"",o={content:e.message,selfClasses:"",showNickname:!0,username:t};c.userId==e.sender?(o.selfClasses="self-sent text-right",o.showNickname=!1):"the socket master"==e.sender&&(o.selfClasses="bold text-center",o.showNickname=!1),c.messageThread.push(o),c.scrollToEnd()}),c.sendMessage=function(){return c.messageToSend&&c.emitAndPostMessage(c.messageToSend),!1},c.emitAndPostMessage=function(e){o.emit("chatroom-message",e),a({method:"POST",url:c.newMessageUrl,data:{sender_account:c.accountid,recipient_account:c.contact.id,content:e},headers:{Authorization:"Bearer "+localStorage.getItem("authToken")}}).then(function(e){console.log(e)},function(e){console.log(e)}),c.messageToSend=""},e.uploadImage=function(t){r.readImage(t,c.sendImage,e)},c.sendImage=function(e){c.emitAndPostMessage(e.target.result)},c.scrollToEnd=function(){$("html, body").animate({scrollTop:$("#message-input-anchor").offset().top},"slow")},c.onClickBack=n.onClickBack}angular.module("weMessageApp").controller("conversationCtrl",e),e.$inject=["$scope","$routeParams","$socket","$http","constants","fileReader"]}(),function(){function e(e,t,o,a){var n=this;n.newChatPopup=function(){t.open({templateUrl:"/modals/newChat/newChat.view.html",controller:"newChatCtrl as vm"})},n.registrationPopup=function(){t.open({templateUrl:"/modals/register/register.view.html",controller:"registerCtrl as vm"})},n.loginPopup=function(){t.open({templateUrl:"/modals/login/login.view.html",controller:"loginCtrl as vm"})},o({method:"GET",url:a.apiUrl}).then(function(e){console.log(e)},function(e){console.log(e)})}angular.module("weMessageApp").controller("homeCtrl",e),e.$inject=["$scope","$uibModal","$http","constants"]}(),function(){function e(e,t){var o=this;o.pageTitle="WeMessage Chat",o.onClickBack=t.onClickBack}angular.module("weMessageApp").controller("chatHomeCtrl",e),e.$inject=["$scope","constants"]}(),function(){function e(){var e="https://obscure-forest-50106.herokuapp.com",t=function(){window.history.back()};return{apiUrl:e,onClickBack:t}}angular.module("weMessageApp").service("constants",e)}(),function(){function e(){var e=new Date;return{now:e}}angular.module("weMessageApp").service("currentTime",e)}(),function(){function e(){var e=function(e,t,o){o.$apply(function(o){var a=e.files[0],n=!1;if(-1!=a.type.search("image")&&(n=!0),n){var r=new FileReader;r.onload=function(e){t(e)},r.readAsDataURL(a)}})};return{readImage:e}}angular.module("weMessageApp").service("fileReader",e)}(),function(){function e(){function e(e){var t=[],o=e.search(/(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?/);if(-1!=o){for(var a=e.split(" "),n=0;n<a.length;n++)if(-1!=a[n].search(/(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?/)){for(var r=a[n],c=r,s=[".",",",";",":","?","\\"],l=0;l<s.length;l++)if(c.endsWith(s[l])){var i=c.split(s[l]);i.pop(),c=i.join(s[l]);break}-1==c.search(/^http.*$/)&&(c="http://"+c),a[n]='<a href="'+c+'" target="_blank">'+r+"</a>",t.push(c)}e=a.join(" ")}return{content:e,links:t}}function t(e,t){for(var o=t.length,a=0;o>a;a++){var n=t[a];(n.endsWith("jpg")||n.endsWith("png")||n.endsWith("gif"))&&(e+='<br><img src="'+n+'">',t.splice(a,1))}return{content:e,links:t}}function o(e){return-1!=e.search("data:image/")?e='<img src="'+e+'">':!1}return function(a){if(o(a))return a=o(a);var n=e(a);if(n.links){var r=t(n.content,n.links);a=r.content}return a}}angular.module("weMessageApp").filter("prettifyMessage",e)}(),function(){function e(e,t,o){var a=this;a.searchUrl=o.apiUrl+"/accounts/search/",a.createUrl=o.apiUrl+"/contacts",a.accountid=localStorage.getItem("accountid"),a.foundContacts=[],a.numSelected=0,a.getSelected=function(e){for(var t=[],o=0;o<e.length;o++)e[o].added&&t.push(e[o].id);return t},a.queryKeyUp=function(){a.formData.query.length>0?t({method:"GET",url:a.searchUrl+a.formData.query}).then(function(e){a.foundContacts=e.data,a.numSelected=a.getSelected(a.foundContacts).length},function(e){console.log(e)}):a.foundContacts=[]},a.selectContact=function(e){1==e.added?e.added=!1:e.added=!0,a.numSelected=a.getSelected(a.foundContacts).length},a.clickAdd=function(){for(var o=a.getSelected(a.foundContacts),n=0;n<o.length;n++)t({method:"POST",url:a.createUrl,data:{adder_id:a.accountid,added_id:o[n]},headers:{Authorization:"Bearer "+localStorage.getItem("authToken")}}).then(function(t){e.close(t.data)},function(e){console.log(e)})},a.closeModal=function(){e.close()}}angular.module("weMessageApp").controller("addContactCtrl",e),e.$inject=["$uibModalInstance","$http","constants"]}(),function(){function e(e,t,o){var a=this;a.roomid=o.roomid,a.onSubmit=function(){return a.formError="",a.formData=a.formData||{},a.formData.nickname?a.joinRoom(a.formData):a.formError="Please enter a nickname.",!1},a.joinRoom=function(e){return e.nickname&&t.emit("join-room",{roomid:a.roomid,nickname:e.nickname}),!1},a.closeModal=function(t){e.close(t)},t.on("nickname-set",function(e){a.closeModal(e)})}angular.module("weMessageApp").controller("chatNicknameCtrl",e),e.$inject=["$uibModalInstance","$socket","chatRoomData"]}(),function(){function e(e,t,o){var a=this;a.formData={},a.formData.sender=o.sender,a.chatUrl=o.chatUrl,a.onClickSend=function(){return console.log("why"),a.formError="",a.formData=a.formData||{},a.formData.sender&&a.formData.recipientName&&a.formData.recipientEmail?(a.sendMail(a.formData),a.closeModal("Your invitation was sent.")):a.formError="Please complete all fields.",!1},a.sendMail=function(e){var o={sender:e.sender,chatUrl:a.chatUrl,recipientName:e.recipientName,recipientEmail:e.recipientEmail};t.post("/email/invite-to-chat",o)},a.closeModal=function(t){e.close(t)},a.onClickCancel=function(){a.closeModal(!1)},a.testFunction=function(){console.log("test")}}angular.module("weMessageApp").controller("emailInviteCtrl",e),e.$inject=["$uibModalInstance","$http","senderInfo"]}(),function(){function e(e,t,o,a){var n=this;n.formData={},n.loginUrl=a.apiUrl+"/authenticate/",n.onClickLogin=function(){return n.formError="",n.formData=n.formData||{},n.formData.email&&n.formData.password?(console.log("form submitted"),t({method:"POST",url:n.loginUrl,data:{email:n.formData.email,password:n.formData.password}}).then(function(e){n.formError="",localStorage.setItem("loggedIn","true"),localStorage.setItem("authToken",e.data.auth_token),localStorage.setItem("accountid",e.data.account.id),localStorage.setItem("accountName",e.data.account.name);var t="/contacts";o.path(t)},function(e){e.data.errors&&(n.formError=e.data.errors[0])})):n.formError="Please complete all fields.",!1},n.onClickCancel=function(){e.close()}}angular.module("weMessageApp").controller("loginCtrl",e),e.$inject=["$uibModalInstance","$http","$location","constants"]}(),function(){function e(e,t){var o=this;o.onConfirmLogout=function(){return console.log("confirmed"),localStorage.clear(),o.closeModal(),t.path("/"),!1},o.closeModal=function(){e.close()}}angular.module("weMessageApp").controller("logoutCtrl",e),e.$inject=["$uibModalInstance","$location"]}(),function(){function e(e,t){var o=this;o.onSubmit=function(){return o.formError="",o.formData=o.formData||{},o.formData.roomName?(o.formError="",t.path("/chat/"+o.formData.roomName)):o.formError="Please enter a name for your chatroom.",!1},o.closeModal=function(){e.close()}}angular.module("weMessageApp").controller("newChatCtrl",e),e.$inject=["$uibModalInstance","$location"]}(),function(){function e(e,t,o,a,n,r){var c=this;c.formData={},c.registerUrl=r.apiUrl+"/register/",c.onClickRegister=function(){return c.formError="",c.formData=c.formData||{},c.formData.name&&c.formData.email&&c.formData.password?(console.log("form submitted"),t({method:"POST",url:c.registerUrl,data:{name:c.formData.name,email:c.formData.email,password:c.formData.password,image:c.profileImage}}).then(function(e){c.formError="",localStorage.setItem("loggedIn","true"),localStorage.setItem("authToken",e.data.auth_token),localStorage.setItem("accountid",e.data.account.id),localStorage.setItem("accountName",e.data.account.name),o.path("/contacts")},function(e){e.data.email?c.formError="We already have an account associated with that email address.":e.data.password?c.formError="Please use a password of six characters or more.":c.formError="There was an error processing your registration, please try again later."})):c.formError="Please complete all required fields.",!1},a.uploadImage=function(e){n.readImage(e,c.setProfileImage,a)},c.setProfileImage=function(e){var t=e.target.result;t&&a.$apply(function(){c.profileImage=t})},c.onClickCancel=function(){e.close()}}angular.module("weMessageApp").controller("registerCtrl",e),e.$inject=["$uibModalInstance","$http","$location","$scope","fileReader","constants"]}(),function(){function e(e){return{restrict:"EA",scope:{},link:function(t){t.todaysDate=e.now},templateUrl:"/common/directives/mainFooter/mainFooter.template.html"}}angular.module("weMessageApp").directive("mainFooter",["currentTime",e]),e.$inject=["currentTime"]}(),function(){function e(e){var t=function(){console.log("whattup");e.open({templateUrl:"/modals/logout/logout.view.html",controller:"logoutCtrl as vm"})};return{restrict:"EA",templateUrl:"/common/directives/mainNavigation/mainNavigation.template.html",link:function(e){e.onClickLogout=t,e.loggedIn=localStorage.getItem("loggedIn")}}}angular.module("weMessageApp").directive("mainNavigation",e),e.$inject=["$uibModal"]}(),function(){function e(){return{restrict:"EA",require:"ngModel",templateUrl:"/common/directives/messageEntry/messageEntry.template.html"}}angular.module("weMessageApp").directive("messageEntry",e)}();
//# sourceMappingURL=data:application/json;base64,
